/*
 * FILE:
 *   sdl_subsystem_handle.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "sdl_subsystem_handle.hpp"
#include "sdl_error.hpp"

#include <SDL2/SDL.h>
#include <map>

namespace Coercri {
    namespace {
        std::map<unsigned int, int> g_subsys_counts;
        int g_sdl_count = 0;
    }


    SDLSubSystemHandle::SDLSubSystemHandle(unsigned int s)
        : subsys(s), ref_count(0)
    {        
        ++g_sdl_count;

        // If no subsystem was requested then we are done
        if (s == 0) return;
        
        // Error check
        Uint32 mask = 1;
        int count = 0;
        while (1) {
            if (s & mask) ++count;
            if (mask >= 0x80000000) break;
            mask <<= 1;
        }
        if (count != 1) throw CoercriError("initSubSystem: invalid parameter");

        // Initialize the subsystem if necessary, and setup ref_count ptr.
        ref_count = &(g_subsys_counts[subsys]);
        if (*ref_count == 0) {
            int err = SDL_InitSubSystem(subsys);
            if (err == -1) {
                throw SDLError("SDL_InitSubSystem failed");
            }
        }

        // Add a new reference to it.
        ++ (*ref_count);
    }        

    SDLSubSystemHandle::SDLSubSystemHandle(const SDLSubSystemHandle &rhs)
        : subsys(0), ref_count(0)
    {
        ++g_sdl_count;

        if (rhs.subsys != 0) {
            subsys = rhs.subsys;
            ref_count = rhs.ref_count;
            ++(*ref_count);
        }
    }

    SDLSubSystemHandle & SDLSubSystemHandle::operator=(const SDLSubSystemHandle &rhs)
    {
        if (this == &rhs) return *this;

        // The old subsys loses a reference
        if (subsys != 0) {
            --(*ref_count);
        }

        // The incoming subsys gains a reference
        if (rhs.subsys != 0) {
            ++(*rhs.ref_count);
        }

        // If the old subsys has no references, quit it
        if (*ref_count == 0) {
            SDL_QuitSubSystem(subsys);
        }

        // Now update
        subsys = rhs.subsys;
        ref_count = rhs.ref_count;

        return *this;
    }

    SDLSubSystemHandle::~SDLSubSystemHandle()
    {
        // The subsys loses a reference
        if (subsys != 0) {
            --(*ref_count);
            // If no references left, quit it
            if (*ref_count == 0) {
                SDL_QuitSubSystem(subsys);
            }
        }

        --g_sdl_count;
        if (g_sdl_count == 0) {
            SDL_Quit();
        }
    }
}
