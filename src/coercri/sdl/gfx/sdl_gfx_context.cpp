/*
 * FILE:
 *   sdl_gfx_context.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "sdl_gfx_context.hpp"
#include "sdl_graphic.hpp"
#include "pixels.hpp"

#include "../../core/coercri_error.hpp"
#include "../../gfx/font.hpp"

namespace {
    // Alpha Blending
    inline Uint8 AlphaBlend(Uint8 input, Uint8 screen, Uint8 alpha)
    {
        // alpha*input + (1-alpha)*screen
        // = alpha*(input - screen) + screen
        const int blend = int(alpha) * (int(input) - int(screen));
        const int result = (blend >> 8) + int(screen);
        return Uint8(result);
    }
}
    

namespace Coercri {

    SDLGfxContext::SDLGfxContext(SDL_Surface &surf)
        : surface(&surf), locked(false)
    {
        clearClipRectangle();
    }

    SDLGfxContext::~SDLGfxContext()
    {
        unlock();
        SDL_Flip(surface);
    }

    void SDLGfxContext::setClipRectangle(const Rectangle &rect)
    {
        clip_rectangle = IntersectRects(rect, Rectangle(0, 0, surface->w, surface->h));
        loadClipRectangle();
    }

    void SDLGfxContext::clearClipRectangle()
    {
        clip_rectangle = Rectangle(0, 0, surface->w, surface->h);
        loadClipRectangle();
    }

    void SDLGfxContext::loadClipRectangle()
    {
        SDL_Rect sdl_rect;
        sdl_rect.x = clip_rectangle.getLeft();
        sdl_rect.y = clip_rectangle.getTop();
        sdl_rect.w = clip_rectangle.getWidth();
        sdl_rect.h = clip_rectangle.getHeight();
        SDL_SetClipRect(surface, &sdl_rect);
    }

    Rectangle SDLGfxContext::getClipRectangle() const
    {
        return clip_rectangle;
    }
        
    int SDLGfxContext::getWidth() const
    {
        return surface->w;
    }

    int SDLGfxContext::getHeight() const
    {
        return surface->h;
    }
    
    void SDLGfxContext::clearScreen(Color colour)
    {
        unlock();
        SDL_FillRect(surface, 0, SDL_MapRGB(surface->format, colour.r, colour.g, colour.b));
    }

    void SDLGfxContext::plotPixel(int x, int y, Color input_col)
    {
        lock();

        if (!pointInClipRectangle(x, y)) return;

        Uint8 r = input_col.r, g = input_col.g, b = input_col.b;
        
        if (input_col.a < 255) {
            // Read the current contents of the pixel and do the alpha blending.
            Uint8 screen_r, screen_g, screen_b;
            ReadPixel(surface, x, y, screen_r, screen_g, screen_b);
            r = AlphaBlend(input_col.r, screen_r, input_col.a);
            g = AlphaBlend(input_col.g, screen_g, input_col.a);
            b = AlphaBlend(input_col.b, screen_b, input_col.a);
        }

        PlotPixel(surface, x, y, r, g, b);
    }

    void SDLGfxContext::drawGraphic(int x, int y, const Graphic &graphic)
    {
        unlock();
        const SDLGraphic *sdl_graphic = dynamic_cast<const SDLGraphic*>(&graphic);
        if (sdl_graphic) {
            sdl_graphic->blit(*surface, x, y);
        }
    }

    void SDLGfxContext::fillRectangle(const Rectangle &rect, Color col)
    {
        unlock();
        
        SDL_Rect sdl_rect;
        sdl_rect.x = rect.getLeft();
        sdl_rect.y = rect.getTop();
        sdl_rect.w = rect.getWidth();
        sdl_rect.h = rect.getHeight();

        if (col.a == 255) {
            // Non-blended case -- we can just use SDL_FillRect
            SDL_FillRect(surface, &sdl_rect, SDL_MapRGB(surface->format, col.r, col.g, col.b));
        } else {
            // Blended case -- create a temporary surface (filled with the requested colour) and blit it.
            SDL_Color sdl_col = {col.r, col.g, col.b};
            SDL_Surface * temp_surface = SDL_CreateRGBSurface(SDL_SRCALPHA, rect.getWidth(), rect.getHeight(), 8, 0, 0, 0, 0);
            SDL_SetColors(temp_surface, &sdl_col, 0, 1);
            SDL_FillRect(temp_surface, 0, 0); // clear the surface to zero.
            SDL_SetAlpha(temp_surface, SDL_SRCALPHA, col.a);
            SDL_BlitSurface(temp_surface, 0, surface, &sdl_rect);
            SDL_FreeSurface(temp_surface);
        }
    }

    boost::shared_ptr<PixelArray> SDLGfxContext::takeScreenshot()
    {
        lock();

        boost::shared_ptr<PixelArray> pixels(new PixelArray(surface->w, surface->h));
        
        for (int y = 0; y < surface->h; ++y) {
            for (int x = 0; x < surface->w; ++x) {
                Color col;
                ReadPixel(surface, x, y, col.r, col.g, col.b);
                col.a = 255;
                (*pixels)(x,y) = col;
            }
        }

        return pixels;
    }
    
    bool SDLGfxContext::pointInClipRectangle(int x, int y) const
    {
        return PointInRect(clip_rectangle, x, y);
    }
    
    void SDLGfxContext::lock()
    {
        if (!locked) {
            if (SDL_LockSurface(surface) < 0) {
                throw CoercriError("SDLGfxContext::lock() failed");
            }
            locked = true;
        }
    }

    void SDLGfxContext::unlock()
    {
        if (locked) {
            SDL_UnlockSurface(surface);
            locked = false;
        }
    }
}
