/*
 * FILE:
 *   sdl_graphic.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2024.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "delete_sdl_surface.hpp"
#include "sdl_graphic.hpp"
#include "sdl_surface_from_pixels.hpp"
#include "sdl_window.hpp"
#include "../../core/coercri_error.hpp"

namespace Coercri {

    SDLGraphic::SDLGraphic(boost::shared_ptr<const PixelArray> p, int hx_, int hy_)
        : pixels(p), hx(hx_), hy(hy_), used_window(nullptr), used_renderer(nullptr)
    {
        if (!pixels) throw CoercriError("Null pixel_array used for graphic");
    }

    SDLGraphic::~SDLGraphic()
    {
        if (used_window) {
            used_window->rmGraphicUsingThisWindow(this);
        }
    }

    void SDLGraphic::createTexture(SDLWindow *window, SDL_Renderer *renderer) const
    {
        // Note: Currently we can only associate a SDLGraphic with a single SDL_Renderer
        // at a time. This is probably very inefficient for multi-window applications
        // (we would have to keep destroying and recreating the texture as the Graphic
        // is rendered to different windows), but it works fine for Knights.
        if (used_renderer != renderer) {
            if (used_window) {
                used_window->rmGraphicUsingThisWindow(this);
            }

            if (renderer == nullptr) {
                texture.reset();
            } else {
                boost::shared_ptr<SDL_Surface> surface = sdl_surface_from_pixels(*pixels);
                texture.reset( SDL_CreateTextureFromSurface( renderer,
                                                             surface.get() ),
                               DeleteSDLTexture() );
            }

            used_window = window;
            used_renderer = renderer;

            if (used_window) {
                used_window->addGraphicUsingThisWindow(this);
            }
        }
    }

    void SDLGraphic::notifyWindowDestroyed(SDLWindow *window) const
    {
        // this window is being destroyed, so our cached texture is no longer valid.
        // delete it.
        createTexture(nullptr, nullptr);
    }

    void SDLGraphic::blit(SDLWindow *window, SDL_Renderer *renderer, int x, int y) const
    {
        createTexture(window, renderer);

        SDL_SetTextureColorMod(texture.get(), 255, 255, 255);
        SDL_SetTextureAlphaMod(texture.get(), 255);

        SDL_Rect dest_rect;
        dest_rect.x = x - hx;
        dest_rect.y = y - hy;
        dest_rect.w = pixels->getWidth();
        dest_rect.h = pixels->getHeight();

        SDL_RenderCopy(renderer, texture.get(), NULL, &dest_rect);
    }

    void SDLGraphic::blitModulated(SDLWindow *window, SDL_Renderer *renderer, int x, int y, Color col) const
    {
        createTexture(window, renderer);

        SDL_SetTextureColorMod(texture.get(), col.r, col.g, col.b);
        SDL_SetTextureAlphaMod(texture.get(), col.a);

        SDL_Rect dest_rect;
        dest_rect.x = x - hx;
        dest_rect.y = y - hy;
        dest_rect.w = pixels->getWidth();
        dest_rect.h = pixels->getHeight();

        SDL_RenderCopy(renderer, texture.get(), NULL, &dest_rect);
    }

    int SDLGraphic::getWidth() const
    {
        return pixels->getWidth();
    }

    int SDLGraphic::getHeight() const
    {
        return pixels->getHeight();
    }

    void SDLGraphic::getHandle(int &x, int &y) const
    {
        x = hx;
        y = hy;
    }

    boost::shared_ptr<const PixelArray> SDLGraphic::getPixels() const
    {
        return pixels;
    }
}
