/*
 * FILE:
 *   sdl_window.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2024.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "sdl_gfx_context.hpp"
#include "sdl_surface_from_pixels.hpp"
#include "sdl_window.hpp"
#include "../../core/coercri_error.hpp"
#include "../../gfx/pixel_array.hpp"

#include <SDL2/SDL.h>

namespace Coercri {

    SDLWindow::SDLWindow(SDL_Window *win, int fsw, int fsh)
        : need_window_resize(false)
        , hidden_flag(false)
        , minimized_flag(false)
        , sdl_window(win)
        , sdl_renderer(nullptr)
    {
        invalidateAll(); // make sure the window gets painted initially.

        sdl_renderer = SDL_CreateRenderer(sdl_window, -1, 0);
        if (sdl_renderer == NULL) {
            SDL_DestroyWindow(sdl_window);
            throw CoercriError("SDL_CreateRenderer failed");
        }

        SDL_SetRenderDrawBlendMode(sdl_renderer, SDL_BLENDMODE_BLEND);
        SDL_SetWindowData(sdl_window, "coercri", this);
    }

    SDLWindow::~SDLWindow()
    {
        SDL_DestroyWindow(sdl_window);
    }

    void SDLWindow::getSize(int &w, int &h) const
    {
        SDL_GetWindowSize(sdl_window, &w, &h);
    }

    bool SDLWindow::hasFocus() const
    {
        const Uint32 focus_flags = SDL_WINDOW_INPUT_FOCUS | SDL_WINDOW_MOUSE_FOCUS;
        return (SDL_GetWindowFlags(sdl_window) & focus_flags) != 0;
    }

    void SDLWindow::popToFront()
    {
        SDL_RaiseWindow(sdl_window);
    }

    void SDLWindow::showMousePointer(bool shown)
    {
        SDL_ShowCursor(shown ? SDL_ENABLE : SDL_DISABLE);
    }

    void SDLWindow::switchToWindowed(int w, int h)
    {
        SDL_SetWindowFullscreen(sdl_window, 0);

        SDL_RestoreWindow(sdl_window);
        SDL_SetWindowSize(sdl_window, w, h);

        // SDL_SetWindowPosition is needed, on Windows at least, otherwise SDL just leaves the window at
        // position (0,0) (so the title bar is inaccessible).
        SDL_SetWindowPosition(sdl_window, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED);

        need_window_resize = true;
    }

    void SDLWindow::switchToFullScreen()
    {
        SDL_SetWindowFullscreen(sdl_window, SDL_WINDOW_FULLSCREEN_DESKTOP);
        need_window_resize = true;
    }

    bool SDLWindow::isFullScreen() const
    {
        return (SDL_GetWindowFlags(sdl_window) & SDL_WINDOW_FULLSCREEN_DESKTOP) != 0;
    }

    bool SDLWindow::isMaximized() const
    {
        return (SDL_GetWindowFlags(sdl_window) & SDL_WINDOW_MAXIMIZED) != 0;
    }

    std::unique_ptr<GfxContext> SDLWindow::createGfxContext()
    {
        std::unique_ptr<GfxContext> p(new SDLGfxContext(sdl_renderer));
        return p;
    }

    void SDLWindow::setIcon(const PixelArray &pixels)
    {
        boost::shared_ptr<SDL_Surface> surf = sdl_surface_from_pixels(pixels);
        SDL_SetWindowIcon(sdl_window, surf.get());
    }
}
