/*
 * FILE:
 *   pixels.hpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "pixels.hpp"

namespace Coercri {

    // Low level SDL pixel routines
    // Parts of these are taken from the SDL introduction,
    // http://www.libsdl.org/intro.en/usingvideo.html

    void ReadPixel(SDL_Surface *surface, int x, int y, Uint8 &r, Uint8 &g, Uint8 &b)
    {
        switch (surface->format->BytesPerPixel) {
        case 1:
            {
                const Uint8 *bufp = (Uint8*)surface->pixels + y * surface->pitch + x;
                SDL_GetRGB(*bufp, surface->format, &r, &g, &b);
            }
            break;
            
        case 2:
            {
                const Uint16 *bufp = (Uint16*)surface->pixels + y * surface->pitch/2 + x;
                SDL_GetRGB(*bufp, surface->format, &r, &g, &b);
            }
            break;
            
        case 3:
            {
                const Uint8 *bufp = (Uint8*)surface->pixels + y * surface->pitch + x*3;
                r = *(bufp + surface->format->Rshift/8);
                g = *(bufp + surface->format->Gshift/8);
                b = *(bufp + surface->format->Bshift/8);
            }
            break;
            
        case 4:
            {
                const Uint32 *bufp = (Uint32*)surface->pixels + y * surface->pitch/4 + x;
                SDL_GetRGB(*bufp, surface->format, &r, &g, &b);
            }
            break;
        }
    }
    
    void PlotPixel(SDL_Surface *surface, int x, int y, Uint8 r, Uint8 g, Uint8 b)
    {
        const Uint32 color = SDL_MapRGB(surface->format, r, g, b);

        switch (surface->format->BytesPerPixel) {
        case 1:
            {
                Uint8 *bufp = (Uint8 *)surface->pixels + y * surface->pitch + x;
                *bufp = color;
            }
            break;
            
        case 2:
            {
                Uint16 *bufp = (Uint16 *)surface->pixels + y * surface->pitch/2 + x;
                *bufp = color;
            }
            break;

        case 3:
            {
                Uint8 *bufp = (Uint8 *)surface->pixels + y * surface->pitch + x*3;
                *(bufp+surface->format->Rshift/8) = r;
                *(bufp+surface->format->Gshift/8) = g;
                *(bufp+surface->format->Bshift/8) = b;
            }
            break;

        case 4:
            {
                Uint32 *bufp = (Uint32 *)surface->pixels + y*surface->pitch/4 + x;
                *bufp = color;
            }
            break;
        }
    }
}
