/*
 * FILE:
 *   cg_graphics.hpp
 *
 * PURPOSE:
 *   Coercri implementation of gcn::Graphics
 *
 * AUTHOR:
 *   Stephen Thompson
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COERCRI_CG_GRAPHICS_HPP
#define COERCRI_CG_GRAPHICS_HPP

#include "../gfx/color.hpp"

#include "guichan.hpp"

namespace Coercri {

    class GfxContext;
    
    class CGGraphics : public gcn::Graphics {
    public:
        CGGraphics() : gfx_context(0), curr_col(255,255,255) { }

        void setTarget(GfxContext *cxt) { gfx_context = cxt; }
        GfxContext * getTarget() const { return gfx_context; }
        
        virtual bool pushClipArea(gcn::Rectangle area);
        virtual void popClipArea();

        virtual void drawImage(const gcn::Image *image,
                               int srcX, int srcY,
                               int dstX, int dstY,
                               int width, int height);
        virtual void drawImage(const gcn::Image *image, int dstX, int dstY);

        virtual void drawPoint(int x, int y);
        
        virtual void drawLine(int x1, int y1, int x2, int y2);
        virtual void drawRectangle(const gcn::Rectangle &rectangle);
        virtual void fillRectangle(const gcn::Rectangle &rectangle);

        virtual void setColor(const gcn::Color &col);
        virtual const gcn::Color & getColor() const;
        // inherited: void setFont(Font *font)
        // inherited: void drawText(const string &text, int x, int y, Alignment alignment)

    private:
        void loadClipArea();
        Color getCoercriColor() const { return Color(curr_col.r, curr_col.g, curr_col.b, curr_col.a); }
        void transformPoint(int &x, int &y) const;
        
    private:
        GfxContext *gfx_context;
        gcn::Color curr_col;
    };
}

#endif
