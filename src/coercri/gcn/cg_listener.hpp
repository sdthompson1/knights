/*
 * FILE:
 *   cg_listener.hpp
 *
 * PURPOSE:
 *   WindowListener for handling a Guichan GUI. Collects
 *   mouse/keyboard input and handles rendering.
 *
 * AUTHOR:
 *   Stephen Thompson
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2011.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COERCRI_CG_LISTENER_HPP
#define COERCRI_CG_LISTENER_HPP

#include "../gfx/window_listener.hpp"

#include "boost/shared_ptr.hpp"

namespace gcn {
    class Gui;
}

namespace Coercri {

    class CGListenerImpl;
    class Timer;
    class Window;
    
    class CGListener : public WindowListener {
    public:
        // NOTE: Gui is disabled initially; make sure to call
        // enableGui() at some point!
        // NOTE: Caller must create the Gui (and add widgets to it)
        // but should not set the Input or Graphics as these are both
        // handled by CGListener.
        CGListener(boost::shared_ptr<Window> window,
                   boost::shared_ptr<gcn::Gui> gui,
                   boost::shared_ptr<Timer> timer);

        // Enable/disable the GUI
        // (This is useful for turning off all GUI processing without
        // having to actually remove the listener from the window.)
        // NOTE: Enabling while already enabled, or disabling while
        // already disabled, is harmless.
        void enableGui();
        void disableGui();
        bool isGuiEnabled() const;

        // This is to work around a bug in guichan
        void repeatLastMouseInput();
        
        // Access the underlying GUI object. Useful for e.g. setting
        // the top widget.
        gcn::Gui & getGUI();
        
        // processInput: If there is outstanding mouse or keyboard
        // input, then run Guichan logic() function, call
        // Window::invalidateAll(), and return true. Else do nothing
        // and return false.
        bool processInput();

        // This function draws the GUI. It should be called from the
        // main loop whenever the window is invalid.
        void draw(GfxContext &gc);
        
        // Overridden from WindowListener:
        virtual void onResize(int new_width, int new_height);
        virtual void onCookedKey(CookedKey ck, int ch, KeyModifier mods);
        virtual void onMouseDown(int x, int y, MouseButton button);
        virtual void onMouseUp(int x, int y, MouseButton button);
        virtual void onMouseMove(int x, int y);

    private:
        boost::shared_ptr<CGListenerImpl> pimpl;
    };

}

#endif
