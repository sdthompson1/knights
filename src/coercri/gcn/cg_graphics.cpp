/*
 * FILE:
 *   cg_graphics.cpp
 *
 * AUTHOR:
 *   Stephen Thompson
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "cg_graphics.hpp"
#include "cg_image.hpp"
#include "../gfx/gfx_context.hpp"
#include "../gfx/rectangle.hpp"

namespace Coercri {

    bool CGGraphics::pushClipArea(gcn::Rectangle area)
    {
        if (!gfx_context) throw GCN_EXCEPTION("pushClipArea: no gfx context");

        // Use the base class to help keep track of clip areas
        const bool result = Graphics::pushClipArea(area);
        loadClipArea();
        return result;
    }

    void CGGraphics::popClipArea()
    {
        if (!gfx_context) throw GCN_EXCEPTION("popClipArea: no gfx context");
        Graphics::popClipArea();
        loadClipArea();
    }

    void CGGraphics::loadClipArea()
    {
        // Load the current clip area into Coercri
        if (mClipStack.empty()) {
            gfx_context->clearClipRectangle();
        } else {
            const gcn::Rectangle & curr_clip = mClipStack.top();
            gfx_context->setClipRectangle(Coercri::Rectangle(curr_clip.x,
                                                             curr_clip.y,
                                                             curr_clip.width,
                                                             curr_clip.height));
        }
    }
    
    void CGGraphics::drawImage(const gcn::Image *image, int srcX, int srcY, int dstX, int dstY, int width, int height)
    {
        if (!gfx_context) throw GCN_EXCEPTION("drawImage: no gfx context");
        
        if (srcX != 0 || srcY != 0 || width != image->getWidth() || height != image->getHeight()) {
            throw GCN_EXCEPTION("drawImage: not implemented for partial images");
        }

        const CGImage * coercri_image = dynamic_cast<const CGImage*>(image);
        if (!coercri_image) {
            throw GCN_EXCEPTION("drawImage: Incompatible image type");
        }

        transformPoint(dstX, dstY);
        gfx_context->drawGraphic(dstX, dstY, coercri_image->getGraphic());
    }

    void CGGraphics::drawImage(const gcn::Image *image, int dstX, int dstY)
    {
        drawImage(image, 0, 0, dstX, dstY, image->getWidth(), image->getHeight());
    }

    void CGGraphics::drawPoint(int x, int y)
    {
        if (!gfx_context) throw GCN_EXCEPTION("drawPoint: no gfx_context");
        transformPoint(x, y);
        gfx_context->plotPixel(x, y, getCoercriColor());
    }

    void CGGraphics::drawLine(int x1, int y1, int x2, int y2)
    {
        if (!gfx_context) throw GCN_EXCEPTION("drawLine: no gfx_context");
        transformPoint(x1, y1);
        transformPoint(x2, y2);
        gfx_context->drawLine(x1, y1, x2, y2, getCoercriColor());
    }

    void CGGraphics::drawRectangle(const gcn::Rectangle &rectangle)
    {
        if (!gfx_context) throw GCN_EXCEPTION("drawRectangle: no gfx_context");
        int x = rectangle.x, y = rectangle.y;
        transformPoint(x, y);
        Coercri::Rectangle rect(x, y, rectangle.width, rectangle.height);
        gfx_context->drawRectangle(rect, getCoercriColor());
    }

    void CGGraphics::fillRectangle(const gcn::Rectangle &rectangle)
    {
        if (!gfx_context) throw GCN_EXCEPTION("fillRectangle: no gfx_context");
        int x = rectangle.x, y = rectangle.y;
        transformPoint(x, y);        
        Coercri::Rectangle rect(x, y, rectangle.width, rectangle.height);
        gfx_context->fillRectangle(rect, getCoercriColor());
    }

    void CGGraphics::setColor(const gcn::Color &color)
    {
        curr_col = color;
    }

    const gcn::Color & CGGraphics::getColor() const
    {
        return curr_col;
    }

    void CGGraphics::transformPoint(int &x, int &y) const
    {
        if (!mClipStack.empty()) {
            x += mClipStack.top().xOffset;
            y += mClipStack.top().yOffset;
        }
    }
}
