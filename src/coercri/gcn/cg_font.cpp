/*
 * FILE:
 *   cg_font.cpp
 *
 * AUTHOR:
 *   Stephen Thompson
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "cg_font.hpp"
#include "cg_graphics.hpp"
#include "../gfx/font.hpp"
#include "../gfx/gfx_context.hpp"

namespace Coercri {

    void CGFont::drawString(gcn::Graphics *graphics, const std::string &text, int x, int y)
    {
        CGGraphics * cg_gfx = dynamic_cast<CGGraphics*>(graphics);
        if (!cg_gfx) {
            throw GCN_EXCEPTION("CGFont can only be used with CGGraphics");
        }

        GfxContext * gfx_context = cg_gfx->getTarget();
        if (!gfx_context) {
            throw GCN_EXCEPTION("CGFont: missing gfx context");
        }

        const gcn::ClipRectangle & clip_area = graphics->getCurrentClipArea();

        const gcn::Color &col = graphics->getColor();
        Coercri::Color coercri_col(col.r, col.g, col.b, col.a);
        
        gfx_context->drawText(clip_area.xOffset + x, clip_area.yOffset + y, *font, text, coercri_col, antialias);
    }

    int CGFont::getHeight() const
    {
        return font->getTextHeight();
    }

    int CGFont::getWidth(const std::string &text) const
    {
        return font->getTextWidth(text);
    }

}
