/*
 * FILE:
 *   enet_network_driver.hpp
 *
 * PURPOSE:
 *   ENet implementation of NetworkDriver
 *
 * AUTHOR:
 *   Stephen Thompson
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2025.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COERCRI_ENET_NETWORK_DRIVER_HPP
#define COERCRI_ENET_NETWORK_DRIVER_HPP

#include "../network/network_driver.hpp"

#include "enet/enet.h"

#include "boost/thread.hpp"

namespace Coercri {

    class EnetNetworkConnection;

    class EnetNetworkDriver : public NetworkDriver {
    public:
        EnetNetworkDriver(int max_incoming, int max_outgoing,   // max no of peers in each direction.
                          bool use_compression);                // whether to use enet 'range coder' packet compression.
        virtual ~EnetNetworkDriver();
        
        virtual boost::shared_ptr<NetworkConnection> openConnection(const std::string &host, int port);
        virtual void setServerPort(int port);
        virtual void enableServer(bool enabled);
        virtual Connections pollIncomingConnections();
        virtual bool doEvents();
        virtual bool outstandingConnections();
        
        virtual boost::shared_ptr<UDPSocket> createUDPSocket(int port, bool reuseaddr);

        virtual std::string resolveAddress(const std::string &ip_address);        

    private:
        bool serviceHost(ENetHost *host);
        void createIncomingHostIfNeeded();
        void destroyIncomingHost();
        
    private:
        static bool is_enet_initialized;   // Don't allow more than one enet instance at the same time.

    private:
        boost::mutex mutex;
        ENetHost *incoming_host, *outgoing_host;
        int server_port;
        bool server_enabled;
        int max_incoming;
        typedef std::vector<boost::shared_ptr<EnetNetworkConnection> > EnetConnections;
        EnetConnections connections_out;
        EnetConnections connections_in;
        Connections new_connections_in;
        bool use_compression;
    };

}

#endif
