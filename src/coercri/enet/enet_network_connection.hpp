/*
 * FILE:
 *   enet_network_connection.hpp
 *
 * PURPOSE:
 *   ENet implementation of NetworkConnection
 *
 * AUTHOR:
 *   Stephen Thompson
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2025.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COERCRI_ENET_CONNECTION_HPP
#define COERCRI_ENET_CONNECTION_HPP

#include "../network/network_connection.hpp"

#include "enet/enet.h"

#include "boost/thread.hpp"

#include <queue>

namespace Coercri {

    class EnetNetworkConnection : public NetworkConnection {
    public:
        // ctor for outgoing connections
        EnetNetworkConnection(ENetHost *host, const std::string &hostname, int port);

        // ctor for incoming connections
        explicit EnetNetworkConnection(ENetPeer *peer_);

        // dtor -- resets the connection and severs link with ENetPeer
        ~EnetNetworkConnection();

        // Overridden from base class:
        virtual State getState() const;
        virtual void close();
        virtual void send(const std::vector<unsigned char> &);
        virtual void receive(std::vector<unsigned char> &);
        virtual std::string getAddress();
        virtual int getPingTime();
        
        // Functions called by EnetNetworkDriver:
        void onReceiveAcknowledgment();
        void onReceivePacket(ENetPacket *packet);
        void onDisconnect();

    private:
        void sendImpl(const std::vector<unsigned char> &);
        
    private:
        // NOTE: if state is CLOSED but peer!=0 this means we have sent our enet_peer_disconnect msg, but
        // haven't received the DISCONNECT event yet. No further transmits should be attempted in this case.
        mutable boost::mutex mutex;
        ENetPeer *peer;
        State state;
        std::queue<ENetPacket*> queued_packets;  // incoming packets
        std::queue<std::vector<unsigned char> > outgoing_packets;   // waiting to be transmitted when we go from PENDING to CONNECTED

#ifdef ENET_BANDWIDTH_LIMIT  // if defined, implements a receive bandwidth limitation, for testing
        time_t renew_time;
        int bandwidth_down_remaining;
#endif
    };

}

#endif
