/*
 * FILE:
 *   load_system_ttf.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2009.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "font.hpp"
#include "load_system_ttf.hpp"
#include "ttf_loader.hpp"
#include "../core/coercri_error.hpp"

#ifdef USE_FONTCONFIG
#include <fontconfig/fontconfig.h>
#endif

#include <fstream>

namespace Coercri {

#ifdef USE_FONTCONFIG
    namespace {
        struct DeleteFcPattern {
            void operator()(FcPattern *p) { FcPatternDestroy(p); }
        };
        struct DeleteFcFontSet {
            void operator()(FcFontSet *f) { FcFontSetDestroy(f); }
        };
    }
#endif    
    
    boost::shared_ptr<Font> LoadSystemTTF(TTFLoader &loader, const std::vector<std::string> &font_names, int size)
    {
        std::vector<std::string> filenames;  // actual filename(s) found for this font.
        filenames.reserve(font_names.size());
        
#ifdef USE_FONTCONFIG

        FcInit();

        boost::shared_ptr<FcPattern> pattern(FcPatternCreate(), DeleteFcPattern());
        FcPatternAddInteger(pattern.get(), FC_SLANT, FC_SLANT_ROMAN);
        FcPatternAddInteger(pattern.get(), FC_WEIGHT, FC_WEIGHT_NORMAL);
        FcPatternAddInteger(pattern.get(), FC_WIDTH, FC_WIDTH_NORMAL);

        for (std::vector<std::string>::const_iterator it = font_names.begin(); it != font_names.end(); ++it) {
            FcPatternAddString(pattern.get(), FC_FAMILY, (const FcChar8*)(it->c_str()));
        }

        FcDefaultSubstitute(pattern.get());
        FcConfigSubstitute(0, pattern.get(), FcMatchPattern);

        FcResult dummy;
        boost::shared_ptr<FcFontSet> matching_set(FcFontSort(0, pattern.get(), false, 0, &dummy), DeleteFcFontSet());
        
        if (matching_set) {
            for (int i = 0; i < matching_set->nfont; ++i) {
                FcChar8 * filename = 0;
                FcPatternGetString(matching_set->fonts[i], FC_FILE, 0, &filename);
                if (filename) {
                    filenames.push_back((char*)(filename));
                }
            }
        }

#elif defined(WIN32)

        const std::string font_dir = std::string(getenv("WINDIR")) + std::string("\\Fonts\\");
        for (std::vector<std::string>::const_iterator it = font_names.begin(); it != font_names.end(); ++it) {
            filenames.push_back(font_dir + (*it) + ".ttf");
        }

#else
#error TrueType font loading not supported on this platform.
#endif

        // Now try to open each file in turn.
        for (std::vector<std::string>::const_iterator it = filenames.begin(); it != filenames.end(); ++it) {
            boost::shared_ptr<std::ifstream> str(new std::ifstream(it->c_str(), std::ios_base::in | std::ios_base::binary));
            if (*str) {
                boost::shared_ptr<Font> result;
                try {
                    result = loader.loadFont(str, size);
                } catch (...) {
                    // disregard exceptions, as we want to try the
                    // next font if there was an error with this one.
                }
                if (result) {
                    // yay! loaded the font successfully.
                    return result;
                }
            }
        }

        // Oh dear, it seems we couldn't load the font
        throw CoercriError("Could not load font");        
    }
}        
