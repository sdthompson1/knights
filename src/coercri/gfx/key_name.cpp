/*
 * FILE:
 *   key_name.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2024.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "key_code.hpp"

#include <map>

namespace Coercri {
    
    std::string KeyCodeToKeyName(KeyCode kc)
    {
        switch (kc) {
        case KC_0: return "0";
        case KC_1: return "1";
        case KC_2: return "2";
        case KC_3: return "3";
        case KC_4: return "4";
        case KC_5: return "5";
        case KC_6: return "6";
        case KC_7: return "7";
        case KC_8: return "8";
        case KC_9: return "9";
        case KC_A: return "A";
        case KC_AMPERSAND: return "&";
        case KC_ASTERISK: return "*";
        case KC_AT: return "@";
        case KC_B: return "B";
        case KC_BACKQUOTE: return "`";
        case KC_BACKSLASH: return "\\";
        case KC_BACKSPACE: return "BACKSPACE";
        case KC_BREAK: return "BREAK";
        case KC_C: return "C";
        case KC_CAPS_LOCK: return "CAPS LOCK";
        case KC_CARET: return "^";
        case KC_CLEAR: return "CLEAR";
        case KC_COLON: return ":";
        case KC_COMMA: return ",";
        case KC_COMPOSE: return "COMPOSE";
        case KC_D: return "D";
        case KC_DELETE: return "DELETE";
        case KC_DOLLAR: return "$";
        case KC_DOUBLE_QUOTE: return "\"";
        case KC_DOWN: return "DOWN";
        case KC_E: return "E";
        case KC_END: return "END";
        case KC_EQUALS: return "=";
        case KC_ESCAPE: return "ESCAPE";
        case KC_EURO: return "EURO";
        case KC_EXCLAIM: return "!";
        case KC_F: return "F";
        case KC_F1: return "F1";
        case KC_F2: return "F2";
        case KC_F3: return "F3";
        case KC_F4: return "F4";
        case KC_F5: return "F5";
        case KC_F6: return "F6";
        case KC_F7: return "F7";
        case KC_F8: return "F8";
        case KC_F9: return "F9";
        case KC_F10: return "F10";
        case KC_F11: return "F11";
        case KC_F12: return "F12";
        case KC_F13: return "F13";
        case KC_F14: return "F14";
        case KC_F15: return "F15";
        case KC_G: return "G";
        case KC_GREATER: return ">";
        case KC_H: return "H";
        case KC_HASH: return "#";
        case KC_HELP: return "HELP";
        case KC_HOME: return "HOME";
        case KC_I: return "I";
        case KC_INSERT: return "INSERT";
        case KC_J: return "J";
        case KC_K: return "K";
        case KC_KP_0: return "NUMPAD 0";
        case KC_KP_1: return "NUMPAD 1";
        case KC_KP_2: return "NUMPAD 2";
        case KC_KP_3: return "NUMPAD 3";
        case KC_KP_4: return "NUMPAD 4";
        case KC_KP_5: return "NUMPAD 5";
        case KC_KP_6: return "NUMPAD 6";
        case KC_KP_7: return "NUMPAD 7";
        case KC_KP_8: return "NUMPAD 8";
        case KC_KP_9: return "NUMPAD 9";
        case KC_KP_DIVIDE: return "NUMPAD /";
        case KC_KP_ENTER: return "ENTER";
        case KC_KP_EQUALS: return "NUMPAD =";
        case KC_KP_MINUS: return "NUMPAD -";
        case KC_KP_MULTIPLY: return "NUMPAD *";
        case KC_KP_PERIOD: return "NUMPAD .";
        case KC_KP_PLUS: return "NUMPAD +";
        case KC_L: return "L";
        case KC_LEFT: return "LEFT";
        case KC_LEFT_ALT: return "LEFT ALT";
        case KC_LEFT_BRACKET: return "[";
        case KC_LEFT_CONTROL: return "LEFT CTRL";
        case KC_LEFT_META: return "LEFT META";
        case KC_LEFT_PAREN: return "LEFT (";
        case KC_LEFT_SHIFT: return "LEFT SHIFT";
        case KC_LEFT_WINDOWS: return "LEFT WINDOWS";
        case KC_LESS: return "<";
        case KC_M: return "M";
        case KC_MENU: return "MENU";
        case KC_MODE: return "MODE";
        case KC_MINUS: return "-";
        case KC_N: return "N";
        case KC_NUM_LOCK: return "NUM LOCK";
        case KC_O: return "O";
        case KC_P: return "P";
        case KC_PAGE_DOWN: return "PAGE DOWN";
        case KC_PAGE_UP: return "PAGE UP";
        case KC_PAUSE: return "PAUSE";
        case KC_PERIOD: return ".";
        case KC_PLUS: return "+";
        case KC_POWER: return "POWER";
        case KC_PRINT_SCREEN: return "PRINT SCREEN";
        case KC_Q: return "Q";
        case KC_QUESTION: return "?";
        case KC_R: return "R";
        case KC_RETURN: return "RETURN";
        case KC_RIGHT: return "RIGHT";
        case KC_RIGHT_ALT: return "RIGHT ALT";
        case KC_RIGHT_BRACKET: return "]";
        case KC_RIGHT_CONTROL: return "RIGHT CTRL";
        case KC_RIGHT_META: return "RIGHT META";
        case KC_RIGHT_PAREN: return ")";
        case KC_RIGHT_SHIFT: return "RIGHT SHIFT";
        case KC_RIGHT_WINDOWS: return "RIGHT WINDOWS";
        case KC_S: return "S";
        case KC_SCROLL_LOCK: return "SCROLL LOCK";
        case KC_SEMICOLON: return ";";
        case KC_SINGLE_QUOTE: return "'";
        case KC_SLASH: return "/";
        case KC_SPACE: return "SPACE";
        case KC_SYSREQ: return "SYSREQ";
        case KC_T: return "T";
        case KC_TAB: return "TAB";
        case KC_U: return "U";
        case KC_UNDERSCORE: return "_";
        case KC_UNDO: return "UNDO";
        case KC_UP: return "UP";
        case KC_V: return "V";
        case KC_W: return "W";
        case KC_X: return "X";
        case KC_Y: return "Y";
        case KC_Z: return "Z";
        case KC_PERCENT: return "%";
        default: return "UNKNOWN";
        }
    }
}
