/*
 * FILE:
 *   bitmap_font.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2024.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "bitmap_font.hpp"
#include "gfx_context.hpp"
#include "gfx_driver.hpp"
#include "kern_table.hpp"
#include "pixel_array.hpp"
#include "../core/coercri_error.hpp"
#include "../core/utf8string.hpp"
#include "../external/utf8.h"

#include <cstring>

namespace Coercri {

    namespace {
        int BringCharIntoRange(int c)
        {
            if (c < 0 || c > 255) {
                return '?';
            } else {
                return c;
            }
        }
    }

    BitmapFont::BitmapFont(boost::shared_ptr<GfxDriver> driver,
                           boost::shared_ptr<PixelArray> pixels)
        : gfx_driver(driver)
    {
        const int w = pixels->getWidth();
        text_height = pixels->getHeight() - 1; // top row is not part of the font proper.

        int ch = 32;
        int ofs = 0;

        for (int i = 0; i < w; ++i) {
            const Color &pixel = (*pixels)(i, 0);
            if (pixel.r==255 && pixel.g==0 && pixel.b==255) {                
                
                if (ch != 32) {
                    // Normal (non-space) character
                    const int width = i - ofs;

                    setupCharacter(ch, width, text_height, 0, 0, width);
                
                    for (int y = 0; y < text_height; ++y) {
                        for (int x = 0; x < width; ++x) {
                            const Color &col = (*pixels)(x + ofs, y + 1);
                            unsigned char a = 255;
                            if (col.r == 0 && col.g == 0 && col.b == 0) {
                                a = 0;
                            }
                            plotPixel(ch, x, y, a);
                        }
                    }
                }

                if (ch == 33) {

                    // Spaces are a special case: width is determined
                    // from the offset of character 33, and no data is
                    // stored
                    
                    setupCharacter(32, 0, 0, 0, 0, ofs);
                }

                // Advance to next character
                ++ch;
                for (; i < w; ++i) {
                    const Color& pix2 = (*pixels)(i, 0);
                    if (pix2.r == 0 && pix2.g == 0 && pix2.b == 0) {
                        ofs = i;
                        break;
                    }
                }
            }
        }

        setupDone();
    }

    BitmapFont::BitmapFont(boost::shared_ptr<GfxDriver> driver,
                           boost::shared_ptr<KernTable> kern,
                           int height)
        : gfx_driver(driver),
          kern_table(kern),
          text_height(height)
    {
    }

    void BitmapFont::setupCharacter(int ch, int width, int height, int xofs, int yofs, int xadvance)
    {
        if (ch < 0 || ch > 255) {
            throw CoercriError("BitmapFont: unsupported character");
        }
        characters[ch].reset(new Character);
        characters[ch]->width = width;
        characters[ch]->height = height;
        characters[ch]->xofs = xofs;
        characters[ch]->yofs = yofs;
        characters[ch]->xadvance = xadvance;
        if (ch != 32) {
            characters[ch]->pixels.resize(width * height);
        }
    }

    void BitmapFont::plotPixel(int ch, int x, int y, unsigned char alpha)
    {
        if (ch < 0 || ch > 255) {
            throw CoercriError("BitmapFont: unsupported character");
        }

        if (ch == 0 || ch == 32) return;
        if (x < 0 || x >= characters[ch]->width) return;
        if (y < 0 || y >= characters[ch]->height) return;
        
        int idx = y * characters[ch]->width + x;
        characters[ch]->pixels[idx] = alpha;
    }

    void BitmapFont::setupDone()
    {
        // Turn the 'pixels' array into a Graphic for each character.
        for (int ch = 0; ch <= 255; ++ch) {
            if (characters[ch]) {
                boost::shared_ptr<PixelArray> pixels(new PixelArray(characters[ch]->width, characters[ch]->height));
                int idx = 0;
                for (int y = 0; y < characters[ch]->height; ++y) {
                    for (int x = 0; x < characters[ch]->width; ++x) {
                        (*pixels)(x, y) = Color(255, 255, 255, characters[ch]->pixels[idx]);
                        idx++;
                    }
                }
                characters[ch]->graphic = gfx_driver->createGraphic(pixels);
                std::vector<unsigned char> empty;
                empty.swap(characters[ch]->pixels);
            }
        }
    }
    
    void BitmapFont::drawText(GfxContext &dest, int x, int y, const UTF8String &txt, Color col) const
    {
        const std::string &text = txt.asUTF8();

        int previous = 0;

        utf8::iterator<std::string::const_iterator>
            begin(text.begin(), text.begin(), text.end()),
            end(text.end(), text.begin(), text.end()),
            it;

        for (it = begin; it != end; ++it) {

            int c = BringCharIntoRange(*it);

            // apply kerning if required
            if (previous && kern_table) {
                x += kern_table->getKern(previous, c);
            }

            if (c != 32) {  // non-space character

                const int xofs = characters[c]->xofs;
                const int yofs = characters[c]->yofs;

                dest.drawGraphicModulated(x + xofs, y + yofs, *characters[c]->graphic, col);
            }
                
            x += characters[c]->xadvance;
            previous = c;
        }
    }

    void BitmapFont::getTextSize(const UTF8String &txt, int &w, int &h) const
    {
        const std::string & text = txt.asUTF8();
        
        utf8::iterator<std::string::const_iterator>
            begin(text.begin(), text.begin(), text.end()),
            end(text.end(), text.begin(), text.end()),
            it;

        w = 0;
        int previous = 0;

        for (it = begin; it != end; ++it) {
            int c = BringCharIntoRange(*it);
            if (previous && kern_table) {
                w += kern_table->getKern(previous, c);
            }
            w += characters[c]->xadvance;
            previous = c;
        }
        h = text_height;
    }

    int BitmapFont::getTextHeight() const
    {
        return text_height;
    }
}
