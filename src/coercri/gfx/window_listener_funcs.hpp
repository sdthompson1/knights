/*
 * FILE:
 *   window_listener_funcs.hpp
 *
 * PURPOSE:
 *   Function objects for use with Window::forEachListener.
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * CREATED:
 *   23-Mar-2014
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2024.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COERCRI_WINDOW_LISTENER_FUNCS_HPP
#define COERCRI_WINDOW_LISTENER_FUNCS_HPP

#include "window_listener.hpp"
#include "../core/utf8string.hpp"

namespace Coercri {

    struct OnClose {
        void operator()(WindowListener *wl) const {
            wl->onClose();
        }
    };

    struct OnGainFocus {
        void operator()(WindowListener *wl) const {
            wl->onGainFocus();
        }
    };

    struct OnLoseFocus {
        void operator()(WindowListener *wl) const {
            wl->onLoseFocus();
        }
    };

    struct OnMinimize {
        void operator()(WindowListener *wl) const {
            wl->onMinimize();
        }
    };

    struct OnUnminimize {
        void operator()(WindowListener *wl) const {
            wl->onUnminimize();
        }
    };

    struct OnResize {
        OnResize(int ww, int hh) : w(ww), h(hh) { }
        void operator()(WindowListener *wl) const {
            wl->onResize(w, h);
        }
        int w, h;
    };

    struct OnKey {
        OnKey(KeyEventType t_, KeyCode c_, KeyModifier m_) : t(t_), c(c_), m(m_) { }
        void operator()(WindowListener *wl) const {
            wl->onKey(t,c,m);
        }
                            KeyEventType t;
        KeyCode c;
        KeyModifier m;
    };

    struct OnTextInput {
        OnTextInput() { }
        OnTextInput(const UTF8String &s) : str(s) { }
        UTF8String str;
        void operator()(WindowListener *wl) const {
            wl->onTextInput(str);
        }
    };

    struct OnMouseDown {
        OnMouseDown(int x_, int y_, MouseButton m_) : x(x_), y(y_), m(m_) { }
        void operator()(WindowListener *wl) const {
            wl->onMouseDown(x,y,m);
        }
        int x, y;
        MouseButton m;
    };

    struct OnMouseUp {
        OnMouseUp(int x_, int y_, MouseButton m_) : x(x_), y(y_), m(m_) { }
        void operator()(WindowListener *wl) const {
            wl->onMouseUp(x,y,m);
        }
        int x, y;
        MouseButton m;
    };

    struct OnMouseMove {
        OnMouseMove(int x_, int y_) : x(x_), y(y_) { }
        void operator()(WindowListener *wl) const {
            wl->onMouseMove(x,y);
        }
        int x, y;
    };
    
}

#endif
