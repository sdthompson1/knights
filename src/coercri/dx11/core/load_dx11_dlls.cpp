/*
 * FILE:
 *   load_dx11_dlls.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * CREATED:
 *   05-Jul-2012
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2011.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "../../core/coercri_error.hpp"
#include "load_dx11_dlls.hpp"

#include <tchar.h>

typedef HRESULT (WINAPI * D3D11CreateDevice_FnPtr) (IDXGIAdapter* pAdapter,
                                                    D3D_DRIVER_TYPE DriverType,
                                                    HMODULE Software,
                                                    UINT Flags,
                                                    const D3D_FEATURE_LEVEL *pFeatureLevels,
                                                    UINT FeatureLevels,
                                                    UINT SDKVersion,
                                                    ID3D11Device **ppDevice,
                                                    D3D_FEATURE_LEVEL *pFeatureLevel,
                                                    ID3D11DeviceContext **ppImmediateContext);

namespace {
    bool success = false;
    bool failed = false;
    
    HMODULE d3d11_module;
    D3D11CreateDevice_FnPtr d3d11_create_device;
}

bool Coercri::LoadDX11()
{
    if (success) return true;
    if (failed) return false;

    // Load D3D11.DLL
    d3d11_module = LoadLibrary(_T("d3d11.dll"));
    if (d3d11_module == NULL) {
        failed = true;
        return false;
    }

    d3d11_create_device = (D3D11CreateDevice_FnPtr) GetProcAddress(d3d11_module, "D3D11CreateDevice");
    if (d3d11_create_device == NULL) {
        failed = true;
        return false;
    }

    success = true;
    return true;
}

HRESULT Coercri::D3D11CreateDevice_Wrapper(IDXGIAdapter* pAdapter,
                                           D3D_DRIVER_TYPE DriverType,
                                           HMODULE Software,
                                           UINT Flags,
                                           const D3D_FEATURE_LEVEL *pFeatureLevels,
                                           UINT FeatureLevels,
                                           UINT SDKVersion,
                                           ID3D11Device **ppDevice,
                                           D3D_FEATURE_LEVEL *pFeatureLevel,
                                           ID3D11DeviceContext **ppImmediateContext)
{
    if (!success) throw CoercriError("DirectX not loaded");

    return (*d3d11_create_device)(pAdapter, DriverType, Software, Flags, pFeatureLevels,
                                  FeatureLevels, SDKVersion, ppDevice, pFeatureLevel, ppImmediateContext);
}
