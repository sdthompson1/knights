/*
 * FILE:
 *   dx_error.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * CREATED:
 *   20-Oct-2011
 *   
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2011.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#include "boost/scoped_array.hpp"
#include "com_ptr_wrapper.hpp"
#include "dx_error.hpp"

#include <sstream>

#include <dxgi.h>
#include <d3d11.h>
#include <windows.h>

namespace Coercri {

    namespace {

        const DWORD facility_dxgi = 0x87a;
        const DWORD facility_d3d11 = 0x87c;

        void AppendComError(std::ostream &str)
        {
            // Find out if a COM error info object is available.
            IErrorInfo *err_info = 0;
            GetErrorInfo(0, &err_info);
            ComPtrWrapper<IErrorInfo> psErrInfo(err_info);  // ensure it will be Released
            
            if (err_info) {
                std::string msg;
                BSTR bstr = 0;

                if (SUCCEEDED(err_info->GetDescription(&bstr))) {

                    // Convert the bstr to UTF-8
                    const int BUF_SIZE = 1024;
                    boost::scoped_array<char> buf(new char[BUF_SIZE]);
                    const int utf8_len = WideCharToMultiByte(CP_UTF8,
                                                             0,
                                                             bstr,
                                                             SysStringLen(bstr), 
                                                             buf.get(),
                                                             BUF_SIZE - 1,
                                                             0,
                                                             0);
                    if (utf8_len > 0 && utf8_len < BUF_SIZE) {
                        buf[utf8_len] = 0;  // add null terminator
                        msg = std::string(buf.get());
                    }

                    // Free the BSTR
                    SysFreeString(bstr);
                }

                if (!msg.empty()) {
                    str << "\nError (from IErrorInfo) = " << msg;
                }
            }
        }

        void AppendFacilityCode(std::ostream &str, HRESULT hr)
        {
            // Check the facility code
            // I haven't been able to find a way to automatically convert facility codes to 
            // strings, so I'm just hard coding a list of known facilities here
            const WORD facility = HRESULT_FACILITY(hr);
            std::string facility_str;
            
            switch (facility) {
                case FACILITY_WIN32: facility_str = "WIN32"; break;
                case FACILITY_ITF: facility_str = "ITF"; break;
                case facility_dxgi: facility_str = "DXGI"; break;
                case facility_d3d11: facility_str = "D3D11"; break;
            }

            if (!facility_str.empty()) {
                str << "\nFacility = " << facility_str;
            }
        }

        void AppendSystemMessage(std::ostream &str, HRESULT hr)
        {
            // For non-FACILITY_ITF facility codes, there might be a system
            // error message available from FormatMessage

            const WORD facility = HRESULT_FACILITY(hr);
            if (facility != FACILITY_ITF) {
            
                char * msg_buf = 0;

                FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER
                              | FORMAT_MESSAGE_FROM_SYSTEM
                              | FORMAT_MESSAGE_IGNORE_INSERTS,
                              0,
                              hr,
                              MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                              (LPTSTR)&msg_buf,
                              0,
                              0);

                if (msg_buf) {
                    // Copy the buffer to the output, then free the buffer
                    str << "\nError (from FormatMessage) = " << msg_buf;
                    LocalFree(msg_buf);
                }
            }
        }

        void AppendKnownErrorCode(std::ostream &str, HRESULT hr)
        {
            std::string msg;
            switch (hr) {
#define Err(X) case X: msg = #X; break;
                Err(DXGI_ERROR_DEVICE_HUNG)
                Err(DXGI_ERROR_DEVICE_REMOVED)
                Err(DXGI_ERROR_DEVICE_RESET)
                Err(DXGI_ERROR_DRIVER_INTERNAL_ERROR)
                Err(DXGI_ERROR_FRAME_STATISTICS_DISJOINT)
                Err(DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE)
                Err(DXGI_ERROR_INVALID_CALL)
                Err(DXGI_ERROR_MORE_DATA)
                Err(DXGI_ERROR_NONEXCLUSIVE)
                Err(DXGI_ERROR_NOT_CURRENTLY_AVAILABLE)
                Err(DXGI_ERROR_NOT_FOUND)
                Err(DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED)
                Err(DXGI_ERROR_REMOTE_OUTOFMEMORY)
                Err(DXGI_ERROR_WAS_STILL_DRAWING)
                Err(DXGI_ERROR_UNSUPPORTED)
                //Err(DXGI_ERROR_ACCESS_LOST)
                //Err(DXGI_ERROR_WAIT_TIMEOUT)
                //Err(DXGI_ERROR_SESSION_DISCONNECTED)
                //Err(DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE)
                //Err(DXGI_ERROR_CANNOT_PROTECT_CONTENT)
                //Err(DXGI_ERROR_ACCESS_DENIED)
                Err(D3D11_ERROR_FILE_NOT_FOUND)
                Err(D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS)
                Err(D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS)
                Err(D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD)
                //Err(D3DERR_INVALIDCALL)
                //Err(D3DERR_WASSTILLDRAWING)
#undef Err
            }
            if (!msg.empty()) str << "\nError = " << msg;
        }

        std::string GetErrMsg(const std::string &base_msg, HRESULT hr)
        {
            std::ostringstream str;

            str << base_msg << "\n\nHRESULT = 0x" << std::hex << hr;

            AppendComError(str);
            AppendFacilityCode(str, hr);
            AppendSystemMessage(str, hr);
            AppendKnownErrorCode(str, hr);

            return str.str();
        }
    }
    
    DXError::DXError(const std::string &msg, HRESULT hr)
        : CoercriError(GetErrMsg(msg, hr))
    { }
}
