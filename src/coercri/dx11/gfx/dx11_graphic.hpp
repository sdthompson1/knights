/*
 * FILE:
 *   dx11_graphic.hpp
 *
 * PURPOSE:
 *   DirectX 11 implementation of Graphic
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * CREATED:
 *   21-Oct-2011
 *   
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2008 - 2011.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef DX11_GRAPHIC_HPP
#define DX11_GRAPHIC_HPP

#include "../core/com_ptr_wrapper.hpp"
#include "../../gfx/graphic.hpp"

#include <d3d11.h>
#ifdef min
#undef min
#endif
#ifdef max
#undef max
#endif

namespace Coercri {

    class DX11Graphic : public Graphic {
    public:
        DX11Graphic(ID3D11Device *device, boost::shared_ptr<const PixelArray> pixels, int hx_, int hy_);

        // overridden from Graphic
        int getWidth() const;
        int getHeight() const;
        void getHandle(int &x, int &y) const { x = hx; y = hy; }
        boost::shared_ptr<const PixelArray> getPixels() const { return parr; }

        // access the underlying D3D texture
        ID3D11ShaderResourceView * getShaderResourceView() const { return m_psShaderResourceView.get(); }

    private:
        ComPtrWrapper<ID3D11Texture2D> m_psTexture;

        // slightly naughty to make this mutable, but logically we are not modifying the 
        // shader resource view, we just may be binding it to the pipeline
        // (which may call AddRef())...
        mutable ComPtrWrapper<ID3D11ShaderResourceView> m_psShaderResourceView;

        int hx;
        int hy;

        // This is a bit of a cop-out, we could probably read the texture back from the gfx card
        // if we really wanted to (but this would require different CPU access flags when creating it).
        // Alternatively we could change the coercri interface so you have to specify if you will
        // be calling getPixels()...
        boost::shared_ptr<const PixelArray> parr;
    };

}

#endif
