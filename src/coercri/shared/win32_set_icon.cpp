/*
 * FILE:
 *   win32_set_icon.cpp
 *
 * AUTHOR:
 *   Stephen Thompson <stephen@solarflare.org.uk>
 *
 * CREATED:
 *   20-Apr-2014
 *
 * COPYRIGHT:
 *   Copyright (C) Stephen Thompson, 2014 - 2024.
 *
 *   This file is part of the "Coercri" software library. Usage of "Coercri"
 *   is permitted under the terms of the Boost Software License, Version 1.0, 
 *   the text of which is displayed below.
 *
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
 */

#ifdef WIN32

#include "win32_set_icon.hpp"
#include "../core/coercri_error.hpp"
#include "../gfx/pixel_array.hpp"

namespace Coercri {

    Win32SetIcon::Win32SetIcon(HWND h)
        : hwnd(h), hicon(0)
    { }

    Win32SetIcon::~Win32SetIcon()
    {
        if (hicon) {
            DestroyIcon(hicon);
        }
    }
    
    void Win32SetIcon::setIcon(const PixelArray &pixels)
    {
        // Destroy the previous one if applicable
        if (hicon) {
            DestroyIcon(hicon);
            hicon = 0;
        }

        // Windows wants BGRA pixels
        std::vector<unsigned char> icon_pixels;
        icon_pixels.reserve(pixels.getWidth() * pixels.getHeight() * 4);
        
        for (int y = 0; y < pixels.getHeight(); ++y) {
            for (int x = 0; x < pixels.getWidth(); ++x) {
                const Color &col = pixels(x, y);
                icon_pixels.push_back(col.b);
                icon_pixels.push_back(col.g);
                icon_pixels.push_back(col.r);
                icon_pixels.push_back(col.a);
            }
        }

        // create the icon
        hicon = CreateIcon(GetModuleHandle(0),
                           pixels.getWidth(),
                           pixels.getHeight(),
                           1,
                           32,
                           0,
                           &icon_pixels[0]);

        // set it as both big and small icon
        if (hicon) {
            SendMessage(hwnd, WM_SETICON, ICON_BIG, (LPARAM)hicon);
            SendMessage(hwnd, WM_SETICON, ICON_SMALL, (LPARAM)hicon);
        } else {
            throw CoercriError("Failed to set the window's icon");
        }
    }
}

#endif
